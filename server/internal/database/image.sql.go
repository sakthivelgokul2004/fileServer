// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: image.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addFileUrl = `-- name: AddFileUrl :one
INSERT INTO files(userId,fileUrl , typeFile, id )
VALUES ($1, $2, $3, $4)
RETURNING userid, fileurl, typefile, id
`

type AddFileUrlParams struct {
	Userid   uuid.UUID
	Fileurl  string
	Typefile string
	ID       uuid.UUID
}

func (q *Queries) AddFileUrl(ctx context.Context, arg AddFileUrlParams) (File, error) {
	row := q.db.QueryRowContext(ctx, addFileUrl,
		arg.Userid,
		arg.Fileurl,
		arg.Typefile,
		arg.ID,
	)
	var i File
	err := row.Scan(
		&i.Userid,
		&i.Fileurl,
		&i.Typefile,
		&i.ID,
	)
	return i, err
}

const getFileByUserId = `-- name: GetFileByUserId :many
SELECT userid, fileurl, typefile, id FROM files WHERE userId = $1
`

func (q *Queries) GetFileByUserId(ctx context.Context, userid uuid.UUID) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFileByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.Userid,
			&i.Fileurl,
			&i.Typefile,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
